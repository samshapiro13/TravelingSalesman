CS 3510 Traveling Salesman Implementation

First we researched a simple Greedy algorithm finding the shortest distance choosing a random starting node however this proved to be time inefficient. Thus we starting looking into other algorithm implementations and eventually reverted back to the greedy algorithm but improve it by adding the 2-opt algorithm to run after the path found by using the shortest distance greedy algorithm. However after playing around with the algorithm, we found it more time efficient to use a random generator to pick starting nodes and have the rest of the path simply be in linear oder and then to run the 2-opt algorithm as this is the most time consuming part.

Overall, we essentially utilized the 2-opt algorithm which goes through a path and switches the paths of nodes to better optimize it where it gets rid of paths that cross over itself and reorders itself so no longer  

The Breakdown of our Algorithm is as follows:

First, the arguments are read in to get nodes into an input file.
The Output File is zeroed out.
The time limit argument was read in and stored in a variable.
A start time is taken in order keeping track of the time for the duration of the algorithm.
The input file is read and create a 2D array of the nodes.
Then a function is called to generate the initial path. 
	This function picks 10 random starting points out of nodes given and creates a tour by linearly following the rest of the nodes.
	The distances of each Tour are calculated by calling another function.
	The tour with the shortest(min) tour length is chosen as the initial tour & is returned.
Then the 2opt Algorithm is run on this selected tour â€“ which searches through the nodes to find path optimizations by uncrossing/swapping the paths between the nodes. Time is checked in order 
It iterates through the tour path until there are no improvements found and then the best tour is returned.
Then the distance of the final tour is calculated.
The Tour length and Final Tour is then written to the output file.
